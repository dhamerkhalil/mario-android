name: Android Debug - Test on Emulator & Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-test-release:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      # Use ONLY the runner's preinstalled SDK
      ANDROID_HOME: /usr/local/lib/android/sdk
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install basic tools (unzip)
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip

      # Ensure required SDK components exist in the SAME SDK path
      - name: Ensure Android SDK components
        run: |
          set -eux
          SDKM="$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
          if [ ! -x "$SDKM" ]; then
            SDKM="$ANDROID_HOME/cmdline-tools/bin/sdkmanager"
          fi
          yes | "$SDKM" --sdk_root="$ANDROID_HOME" --licenses || true
          "$SDKM" --sdk_root="$ANDROID_HOME" \
            "platform-tools" "platforms;android-33" "build-tools;33.0.2"
          # quick list check (noisy output suppressed)
          "$SDKM" --sdk_root="$ANDROID_HOME" --list >/dev/null || true

      # Make Gradle use this SDK regardless of env ambiguity
      - name: Pin SDK path in local.properties
        run: |
          echo "sdk.dir=$ANDROID_HOME" > android/local.properties
          cat android/local.properties

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build web app (Vite)
        run: npm run build

      - name: Copy web assets to Android (Capacitor)
        run: npx cap sync android

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Debug APK (assembleDebug)
        run: |
          set -euxo pipefail
          cd android
          chmod +x ./gradlew || true
          ./gradlew assembleDebug --no-daemon --stacktrace

      # Inspect APK to catch issues like minSdk / ABI / signature that cause "cannot parse"
      - name: Verify APK (signature + manifest + ABIs)
        id: inspect
        run: |
          set -euxo pipefail
          APK="android/app/build/outputs/apk/debug/app-debug.apk"
          echo "APK=$APK" >> $GITHUB_ENV
          ls -lh "$APK"

          "$ANDROID_HOME/build-tools/33.0.2/apksigner" verify --print-certs "$APK"

          # Extract package and launchable activity for later steps
          PKG=$("$ANDROID_HOME/build-tools/33.0.2/aapt" dump badging "$APK" | awk -F"'" '/package: name=/{print $2}')
          ACT=$("$ANDROID_HOME/build-tools/33.0.2/aapt" dump badging "$APK" | awk -F"'" '/launchable-activity: name=/{print $2}')
          echo "PKG=$PKG" >> $GITHUB_ENV
          echo "ACT=$ACT" >> $GITHUB_ENV

