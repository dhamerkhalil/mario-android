{"version":3,"file":"index-C_S_BHFO.js","sources":["../../src/game/Player.ts","../../src/game/Turtle.ts","../../src/game/BaseLevel.ts","../../src/game/Level.ts","../../src/game/FlyingEnemy.ts","../../src/game/Level2.ts","../../src/game/InputManager.ts","../../src/game/Game.ts","../../src/main.ts"],"sourcesContent":["import { InputManager } from './InputManager';\n\nexport class Player {\n  public x: number;\n  public y: number;\n  private width: number = 32;\n  private height: number = 32;\n  private velocityX: number = 0;\n  private velocityY: number = 0;\n  private speed: number = 200;\n  private jumpPower: number = 400;\n  private gravity: number = 800;\n  private onGround: boolean = false;\n  private lives: number = 3;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  public update(deltaTime: number, inputManager: InputManager): void {\n    const dt = deltaTime / 1000; // Convert to seconds\n\n    // Handle horizontal movement\n    if (inputManager.isKeyPressed('ArrowLeft')) {\n      this.velocityX = -this.speed;\n    } else if (inputManager.isKeyPressed('ArrowRight')) {\n      this.velocityX = this.speed;\n    } else {\n      this.velocityX = 0;\n    }\n\n    // Handle jumping\n    if (inputManager.isKeyPressed('Space') && this.onGround) {\n      this.velocityY = -this.jumpPower;\n      this.onGround = false;\n    }\n\n    // Apply gravity\n    this.velocityY += this.gravity * dt;\n\n    // Update position\n    this.x += this.velocityX * dt;\n    this.y += this.velocityY * dt;\n\n  // Keep player on screen (dynamic canvas width)\n  const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\n  const maxWidth = canvas ? canvas.width : 1900;\n  if (this.x < 0) this.x = 0;\n  if (this.x + this.width > maxWidth) this.x = maxWidth - this.width;\n\n    // Reset ground state\n    this.onGround = false;\n  }\n\n  public render(ctx: CanvasRenderingContext2D): void {\n    // Draw Mario-like character (simple colored rectangle)\n    ctx.fillStyle = '#FF0000'; // Red body\n    ctx.fillRect(this.x, this.y, this.width, this.height);\n    \n    // Draw face\n    ctx.fillStyle = '#FFE4B5'; // Skin color\n    ctx.fillRect(this.x + 4, this.y + 4, 24, 16);\n    \n    // Draw eyes\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(this.x + 8, this.y + 8, 4, 4);\n    ctx.fillRect(this.x + 20, this.y + 8, 4, 4);\n    \n    // Draw mustache\n    ctx.fillStyle = '#8B4513';\n    ctx.fillRect(this.x + 10, this.y + 12, 12, 4);\n    \n    // Draw hat\n    ctx.fillStyle = '#8B0000';\n    ctx.fillRect(this.x + 2, this.y, 28, 8);\n    \n    // Draw overalls\n    ctx.fillStyle = '#0000FF';\n    ctx.fillRect(this.x + 6, this.y + 20, 20, 12);\n    \n    // Draw buttons\n    ctx.fillStyle = '#FFD700';\n    ctx.fillRect(this.x + 10, this.y + 22, 4, 4);\n    ctx.fillRect(this.x + 18, this.y + 22, 4, 4);\n  }\n\n  public getBounds() {\n    return {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height\n    };\n  }\n\n  public setPosition(x: number, y: number): void {\n    this.x = x;\n    this.y = y;\n  }\n\n  public reset(x: number, y: number): void {\n    this.x = x;\n    this.y = y;\n    this.velocityX = 0;\n    this.velocityY = 0;\n    this.onGround = false;\n  }\n\n  public setOnGround(onGround: boolean): void {\n    this.onGround = onGround;\n  }\n\n  public getVelocityY(): number {\n    return this.velocityY;\n  }\n\n  public setVelocityY(velocity: number): void {\n    this.velocityY = velocity;\n  }\n\n  public loseLife(): void {\n    this.lives -= 1;\n  }\n\n  public getLives(): number {\n    return this.lives;\n  }\n}\n","// import { InputManager } from './InputManager';\n\nexport class Turtle {\n  public x: number;\n  public y: number;\n  private width: number = 32;\n  private height: number = 32;\n  private velocityX: number = -50; // Default movement speed\n  // private onGround: boolean = true; // Unused\n  private animationFrame: number = 0;\n  private animationTimer: number = 0;\n  private animationInterval: number = 200; // Milliseconds per frame\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  public update(deltaTime: number): void {\n    const dt = deltaTime / 1000; // Convert to seconds\n\n    // Move horizontally\n    this.x += this.velocityX * dt;\n\n    // Keep turtle on screen\n    if (this.x < 0 || this.x + this.width > 800) {\n      this.velocityX *= -1; // Reverse direction\n    }\n\n    // Update animation\n    this.animationTimer += deltaTime;\n    if (this.animationTimer >= this.animationInterval) {\n      this.animationFrame = (this.animationFrame + 1) % 2; // Toggle between 0 and 1\n      this.animationTimer = 0;\n    }\n  }\n\n  public render(ctx: CanvasRenderingContext2D): void {\n    // Draw turtle with animation\n    ctx.fillStyle = this.animationFrame === 0 ? '#008000' : '#006400'; // Alternate green shades\n    ctx.fillRect(this.x, this.y, this.width, this.height);\n\n    // Draw shell\n    ctx.fillStyle = '#654321'; // Brown shell\n    ctx.fillRect(this.x + 4, this.y + 8, 24, 16);\n  }\n\n  public isDefeated(): boolean {\n    // Placeholder for defeat logic\n    return false;\n  }\n\n  public getBounds() {\n    return {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n    };\n  }\n}","import { Player } from './Player';\n\nexport abstract class BaseLevel {\n  protected gameRunning: boolean = true; // Changed from private to protected\n\n  abstract update(deltaTime: number): void;\n  abstract render(ctx: CanvasRenderingContext2D): void;\n  abstract checkCollisions(player: Player): void;\n\n  public endGame(won: boolean): void {\n    this.gameRunning = false;\n    const message = document.createElement('div');\n    message.textContent = won ? 'You Win! Restarting...' : 'Game Over! Restarting...';\n    message.style.position = 'absolute';\n    message.style.top = '50%';\n    message.style.left = '50%';\n    message.style.transform = 'translate(-50%, -50%)';\n    message.style.color = 'white';\n    message.style.fontSize = '24px';\n    message.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n    message.style.padding = '10px';\n    message.style.borderRadius = '5px';\n    document.body.appendChild(message);\n\n    setTimeout(() => window.location.reload(), 2000);\n  }\n}","import { Player } from './Player';\nimport { Turtle } from './Turtle';\nimport { Game } from './Game';\nimport { BaseLevel } from './BaseLevel';\n\nexport class Level extends BaseLevel {\n  protected platforms: Array<{x: number, y: number, width: number, height: number}> = []; // Changed from private to protected\n  protected turtles: Turtle[] = [];\n  protected gameRunning: boolean = true; // Flag to control game loop\n\n  constructor() {\n    super();\n    this.createLevel();\n    this.spawnTurtles();\n  }\n\n  protected createLevel(): void {\n  // Responsive ground platform (fills canvas width)\n  const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\n  const width = canvas ? canvas.width : 1900;\n  const height = canvas ? canvas.height : 900;\n  // Ground height is 10% of screen height\n  const groundHeight = Math.round(height * 0.10);\n  this.platforms.push({ x: 0, y: height - groundHeight, width: width, height: groundHeight });\n\n  // Responsive floating platforms (relative positions)\n  this.platforms.push({ x: width * 0.12, y: height * 0.65, width: width * 0.08, height: 20 });\n  this.platforms.push({ x: width * 0.28, y: height * 0.52, width: width * 0.09, height: 20 });\n  this.platforms.push({ x: width * 0.45, y: height * 0.40, width: width * 0.09, height: 20 });\n  this.platforms.push({ x: width * 0.62, y: height * 0.30, width: width * 0.08, height: 20 });\n  this.platforms.push({ x: width * 0.75, y: height * 0.20, width: width * 0.07, height: 20 });\n  }\n\n  protected spawnTurtles(): void {\n    this.turtles.push(new Turtle(300, 518)); // Spawn a turtle on the ground\n    this.turtles.push(new Turtle(500, 518)); // Spawn another turtle\n  }\n\n  public update(deltaTime: number): void {\n    if (!this.gameRunning) return; // Skip update if game is not running\n\n    this.turtles.forEach(turtle => turtle.update(deltaTime));\n  }\n\n  public render(ctx: CanvasRenderingContext2D): void {\n    // Draw platforms\n    this.platforms.forEach((platform, idx) => {\n      if (idx === 0) {\n        // Ground platform: fill entire bottom\n        ctx.fillStyle = '#90EE90'; // Green ground\n        ctx.fillRect(0, platform.y, ctx.canvas.width, ctx.canvas.height - platform.y);\n      } else {\n        ctx.fillStyle = '#8B4513'; // Brown color for platforms\n        ctx.fillRect(platform.x, platform.y, platform.width, platform.height);\n        // Add some texture\n        ctx.fillStyle = '#A0522D';\n        ctx.fillRect(platform.x + 2, platform.y + 2, platform.width - 4, platform.height - 4);\n      }\n    });\n\n    // Draw turtles\n    this.turtles.forEach(turtle => turtle.render(ctx));\n  }\n\n  public checkCollisions(player: Player): void {\n    const playerBounds = player.getBounds();\n    let onGround = false;\n\n    this.platforms.forEach(platform => {\n      // Check if player is colliding with platform\n      if (playerBounds.x < platform.x + platform.width &&\n          playerBounds.x + playerBounds.width > platform.x &&\n          playerBounds.y < platform.y + platform.height &&\n          playerBounds.y + playerBounds.height > platform.y) {\n        \n        // Check if player is falling onto platform from above\n        if (player.getVelocityY() > 0 && playerBounds.y < platform.y) {\n          player.setPosition(player.x, platform.y - playerBounds.height);\n          player.setVelocityY(0);\n          player.setOnGround(true);\n          onGround = true;\n        }\n      }\n    });\n\n    // Check if player is on ground level\n    if (playerBounds.y + playerBounds.height >= 550) {\n      player.setPosition(player.x, 550 - playerBounds.height);\n      player.setVelocityY(0);\n      player.setOnGround(true);\n      onGround = true;\n    }\n\n    if (!onGround) {\n      player.setOnGround(false);\n    }\n\n    // Check collisions with turtles\n    this.turtles.forEach(turtle => {\n      const turtleBounds = { x: turtle.x, y: turtle.y, width: 32, height: 32 };\n\n      if (\n        playerBounds.x < turtleBounds.x + turtleBounds.width &&\n        playerBounds.x + playerBounds.width > turtleBounds.x &&\n        playerBounds.y < turtleBounds.y + turtleBounds.height &&\n        playerBounds.y + playerBounds.height > turtleBounds.y\n      ) {\n        if (player.getVelocityY() > 0 && playerBounds.y + playerBounds.height <= turtleBounds.y + 10) {\n          // Player defeats the turtle by jumping on it\n          this.turtles = this.turtles.filter(t => t !== turtle);\n        } else {\n          // Player loses if touching the turtle from the side or bottom\n          player.loseLife();\n          if (player.getLives() <= 0) {\n            this.endGame(false); // Lose condition\n          } else {\n            player.setPosition(100, 400); // Reset player position\n          }\n        }\n      }\n    });\n\n    if (this.turtles.length === 0) {\n      this.endGame(true); // Win condition\n    }\n  }\n\n  public endGame(won: boolean): void {\n    if (!this.gameRunning) return; // Prevent multiple calls to endGame\n\n    this.gameRunning = false; // Stop the game loop\n    this.gameRunning = false; // Stop the game loop to prevent repeated calls\n\n    if (won) {\n      const message = document.createElement('div');\n      message.textContent = 'Level 1 Complete! Loading Level 2...';\n      message.style.position = 'absolute';\n      message.style.top = '50%';\n      message.style.left = '50%';\n      message.style.transform = 'translate(-50%, -50%)';\n      message.style.color = 'white';\n      message.style.fontSize = '24px';\n      message.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n      message.style.padding = '10px';\n      message.style.borderRadius = '5px';\n      document.body.appendChild(message);\n\n      setTimeout(() => {\n        const game = new Game(document.getElementById('gameCanvas') as HTMLCanvasElement);\n        game.loadLevel2();\n      }, 2000);\n    } else {\n      const message = document.createElement('div');\n      message.textContent = 'Game Over! Restarting...';\n      message.style.position = 'absolute';\n      message.style.top = '50%';\n      message.style.left = '50%';\n      message.style.transform = 'translate(-50%, -50%)';\n      message.style.color = 'white';\n      message.style.fontSize = '24px';\n      message.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n      message.style.padding = '10px';\n      message.style.borderRadius = '5px';\n      document.body.appendChild(message);\n\n      setTimeout(() => window.location.reload(), 2000);\n    }\n  }\n}\n","export class FlyingEnemy {\n  public x: number;\n  public y: number;\n  private width: number = 32;\n  private height: number = 32;\n  private velocityX: number = 100; // Horizontal speed\n  // private velocityY: number = 50; // Vertical oscillation speed (unused)\n  private amplitude: number = 20; // Oscillation amplitude\n  private baseY: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.baseY = y;\n  }\n\n  public update(deltaTime: number): void {\n    const dt = deltaTime / 1000; // Convert to seconds\n\n    // Move horizontally\n    this.x += this.velocityX * dt;\n\n    // Oscillate vertically\n    this.y = this.baseY + Math.sin(Date.now() / 500) * this.amplitude;\n\n    // Reverse direction if hitting screen edges\n    if (this.x < 0 || this.x + this.width > 800) {\n      this.velocityX *= -1;\n    }\n  }\n\n  public render(ctx: CanvasRenderingContext2D): void {\n    // Draw flying enemy (simple red rectangle)\n    ctx.fillStyle = '#FF0000'; // Red body\n    ctx.fillRect(this.x, this.y, this.width, this.height);\n\n    // Draw wings\n    ctx.fillStyle = '#FFA500'; // Orange wings\n    ctx.fillRect(this.x - 5, this.y + 10, 10, 5);\n    ctx.fillRect(this.x + 27, this.y + 10, 10, 5);\n  }\n\n  public getBounds() {\n    return {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n    };\n  }\n}","import { Player } from './Player';\nimport { FlyingEnemy } from './FlyingEnemy';\nimport { Turtle } from './Turtle';\nimport { Level } from './Level';\n\nexport class Level2 extends Level {\n  protected platforms: Array<{ x: number; y: number; width: number; height: number }> = []; // Changed from private to protected\n  protected turtles: Turtle[] = [];\n  protected flyingEnemies: FlyingEnemy[] = [];\n\n  protected gameRunning: boolean = true; // Changed from private to protected\n\n  constructor() {\n    super();\n    this.createLevel();\n    this.spawnEnemies();\n  }\n\n  protected createLevel(): void {\n    // Responsive ground platform (fills canvas width)\n    const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\n    const width = canvas ? canvas.width : 1900;\n    const height = canvas ? canvas.height : 900;\n    const groundHeight = Math.round(height * 0.1); // Higher ground for better jump\n    this.platforms.push({ x: 0, y: height - groundHeight, width: width, height: groundHeight });\n\n    // Responsive floating platforms (higher for Mario's jump)\n    this.platforms.push({ x: width * 0.12, y: height * 0.60, width: width * 0.09, height: 24 });\n    this.platforms.push({ x: width * 0.32, y: height * 0.48, width: width * 0.10, height: 24 });\n    this.platforms.push({ x: width * 0.54, y: height * 0.36, width: width * 0.10, height: 24 });\n    this.platforms.push({ x: width * 0.72, y: height * 0.26, width: width * 0.09, height: 24 });\n    this.platforms.push({ x: width * 0.85, y: height * 0.16, width: width * 0.08, height: 24 });\n  }\n\n  private spawnEnemies(): void {\n    this.spawnTurtles();\n\n    // Place flying enemies above platforms for visibility\n    const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\n    const width = canvas ? canvas.width : 1900;\n    const height = canvas ? canvas.height : 900;\n    this.flyingEnemies.push(new FlyingEnemy(width * 0.15, height * 0.55));\n    this.flyingEnemies.push(new FlyingEnemy(width * 0.60, height * 0.32));\n  }\n\n  protected spawnTurtles(): void {\n    const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\n    const width = canvas ? canvas.width : 1900;\n    const height = canvas ? canvas.height : 900;\n    const groundHeight = Math.round(height * 0.13);\n    const groundY = height - groundHeight;\n    // Place turtles on ground, spaced out\n    this.turtles.push(new Turtle(width * 0.25, groundY - 32));\n    this.turtles.push(new Turtle(width * 0.55, groundY - 32));\n  }\n\n  public update(deltaTime: number): void {\n    if (!this.gameRunning) return;\n\n    this.turtles.forEach((turtle) => turtle.update(deltaTime));\n    this.flyingEnemies.forEach((enemy) => enemy.update(deltaTime));\n  }\n\n  public render(ctx: CanvasRenderingContext2D): void {\n    // Draw platforms\n    this.platforms.forEach((platform, idx) => {\n      if (idx === 0) {\n        // Ground platform: fill entire bottom\n        ctx.fillStyle = '#90EE90'; // Green ground\n        ctx.fillRect(0, platform.y, ctx.canvas.width, ctx.canvas.height - platform.y);\n      } else {\n        ctx.fillStyle = '#8B4513'; // Brown color for platforms\n        ctx.fillRect(platform.x, platform.y, platform.width, platform.height);\n        // Add some texture\n        ctx.fillStyle = '#A0522D';\n        ctx.fillRect(platform.x + 2, platform.y + 2, platform.width - 4, platform.height - 4);\n      }\n    });\n\n    // Draw turtles\n    this.turtles.forEach((turtle) => turtle.render(ctx));\n\n    // Draw flying enemies\n    this.flyingEnemies.forEach((enemy) => enemy.render(ctx));\n  }\n\n  public checkCollisions(player: Player): void {\n    const playerBounds = player.getBounds();\n    let onGround = false;\n\n    this.platforms.forEach((platform) => {\n      // Check if player is colliding with platform\n      if (\n        playerBounds.x < platform.x + platform.width &&\n        playerBounds.x + playerBounds.width > platform.x &&\n        playerBounds.y < platform.y + platform.height &&\n        playerBounds.y + playerBounds.height > platform.y\n      ) {\n        // Check if player is falling onto platform from above\n        if (player.getVelocityY() > 0 && playerBounds.y < platform.y) {\n          player.setPosition(player.x, platform.y - playerBounds.height);\n          player.setVelocityY(0);\n          player.setOnGround(true);\n          onGround = true;\n        }\n      }\n    });\n\n    if (!onGround) {\n      player.setOnGround(false);\n    }\n\n    // Check collisions with turtles\n    this.turtles.forEach((turtle) => {\n      const turtleBounds = turtle.getBounds();\n\n      if (\n        playerBounds.x < turtleBounds.x + turtleBounds.width &&\n        playerBounds.x + playerBounds.width > turtleBounds.x &&\n        playerBounds.y < turtleBounds.y + turtleBounds.height &&\n        playerBounds.y + playerBounds.height > turtleBounds.y\n      ) {\n        if (player.getVelocityY() > 0 && playerBounds.y + playerBounds.height <= turtleBounds.y + 10) {\n          // Player defeats the turtle by jumping on it\n          this.turtles = this.turtles.filter((t) => t !== turtle);\n        } else {\n          // Player loses if touching the turtle from the side or bottom\n          player.loseLife();\n        }\n      }\n    });\n\n    // Check collisions with flying enemies\n    this.flyingEnemies.forEach((enemy) => {\n      const enemyBounds = enemy.getBounds();\n\n      if (\n        playerBounds.x < enemyBounds.x + enemyBounds.width &&\n        playerBounds.x + playerBounds.width > enemyBounds.x &&\n        playerBounds.y < enemyBounds.y + enemyBounds.height &&\n        playerBounds.y + playerBounds.height > enemyBounds.y\n      ) {\n        // Player loses if touching a flying enemy\n        player.loseLife();\n      }\n    });\n  }\n\n  public endGame(won: boolean): void {\n    if (won) {\n      const message = document.createElement('div');\n      message.textContent = 'Congratulations! You have completed the game!';\n      message.style.position = 'absolute';\n      message.style.top = '50%';\n      message.style.left = '50%';\n      message.style.transform = 'translate(-50%, -50%)';\n      message.style.color = 'white';\n      message.style.fontSize = '24px';\n      message.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n      message.style.padding = '10px';\n      message.style.borderRadius = '5px';\n      document.body.appendChild(message);\n\n      // Add a play again button\n      const playAgainBtn = document.createElement('button');\n      playAgainBtn.textContent = 'Play Again';\n      playAgainBtn.style.position = 'absolute';\n      playAgainBtn.style.top = '60%';\n      playAgainBtn.style.left = '50%';\n      playAgainBtn.style.transform = 'translate(-50%, -50%)';\n      playAgainBtn.style.padding = '10px 20px';\n      playAgainBtn.style.fontSize = '18px';\n      playAgainBtn.style.cursor = 'pointer';\n      playAgainBtn.onclick = () => window.location.reload();\n      document.body.appendChild(playAgainBtn);\n    } else {\n      const message = document.createElement('div');\n      message.textContent = 'Game Over! Restarting...';\n      message.style.position = 'absolute';\n      message.style.top = '50%';\n      message.style.left = '50%';\n      message.style.transform = 'translate(-50%, -50%)';\n      message.style.color = 'white';\n      message.style.fontSize = '24px';\n      message.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n      message.style.padding = '10px';\n      message.style.borderRadius = '5px';\n      document.body.appendChild(message);\n\n      setTimeout(() => window.location.reload(), 2000);\n    }\n  }\n}","export class InputManager {\n  private keys: Map<string, boolean> = new Map();\n\n  public setKeyState(key: string, pressed: boolean): void {\n    this.keys.set(key, pressed);\n    console.log(`Touch event: ${key} set to ${pressed}`);\n  }\n\n  public isKeyPressed(key: string): boolean {\n    return this.keys.get(key) || false;\n  }\n\n  public isKeyJustPressed(key: string): boolean {\n    // This would need to track previous frame state for proper implementation\n    // For now, just return the current state\n    return this.keys.get(key) || false;\n  }\n\n  public initializeTouchControls(): void {\n    const leftButton = document.getElementById('leftButton');\n    const rightButton = document.getElementById('rightButton');\n    const jumpButton = document.getElementById('jumpButton');\n\n    if (leftButton) {\n      leftButton.addEventListener('touchstart', () => this.setKeyState('ArrowLeft', true));\n      leftButton.addEventListener('touchend', () => this.setKeyState('ArrowLeft', false));\n      leftButton.addEventListener('mousedown', () => this.setKeyState('ArrowLeft', true));\n      leftButton.addEventListener('mouseup', () => this.setKeyState('ArrowLeft', false));\n    }\n\n    if (rightButton) {\n      rightButton.addEventListener('touchstart', () => this.setKeyState('ArrowRight', true));\n      rightButton.addEventListener('touchend', () => this.setKeyState('ArrowRight', false));\n      rightButton.addEventListener('mousedown', () => this.setKeyState('ArrowRight', true));\n      rightButton.addEventListener('mouseup', () => this.setKeyState('ArrowRight', false));\n    }\n\n    if (jumpButton) {\n      jumpButton.addEventListener('touchstart', () => this.setKeyState('Space', true));\n      jumpButton.addEventListener('touchend', () => this.setKeyState('Space', false));\n      jumpButton.addEventListener('mousedown', () => this.setKeyState('Space', true));\n      jumpButton.addEventListener('mouseup', () => this.setKeyState('Space', false));\n    }\n  }\n}\n","import { Player } from './Player';\nimport { Level } from './Level';\nimport { Level2 } from './Level2';\nimport { InputManager } from './InputManager';\n\nexport class Game {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private player: Player;\n  private level: Level;\n  private inputManager: InputManager;\n  private lastTime: number = 0;\n  private score: number = 0;\n  private lives: number = 3;\n  private gameRunning: boolean = false;\n\n  constructor(canvas: HTMLCanvasElement) {\n  this.canvas = canvas;\n  this.ctx = canvas.getContext('2d')!;\n  this.inputManager = new InputManager();\n  this.level = new Level();\n  // Place Mario on the ground, centered horizontally\n  const groundY = this.canvas.height - Math.round(this.canvas.height * 0.10);\n  this.player = new Player(this.canvas.width * 0.08, groundY - 32); // 32 = Mario's height\n  this.setupEventListeners();\n  this.inputManager.initializeTouchControls();\n  }\n\n  private setupEventListeners(): void {\n    // Touch controls for mobile\n    this.canvas.addEventListener('touchstart', (e) => {\n      e.preventDefault();\n      const touch = e.touches[0];\n      const rect = this.canvas.getBoundingClientRect();\n      const x = touch.clientX - rect.left;\n      \n      // Simple touch controls - left half for left, right half for right\n      if (x < this.canvas.width / 2) {\n        this.inputManager.setKeyState('ArrowLeft', true);\n      } else {\n        this.inputManager.setKeyState('ArrowRight', true);\n      }\n    });\n\n    this.canvas.addEventListener('touchend', (e) => {\n      e.preventDefault();\n      this.inputManager.setKeyState('ArrowLeft', false);\n      this.inputManager.setKeyState('ArrowRight', false);\n    });\n\n    // Keyboard controls\n    document.addEventListener('keydown', (e) => {\n      this.inputManager.setKeyState(e.code, true);\n    });\n\n    document.addEventListener('keyup', (e) => {\n      this.inputManager.setKeyState(e.code, false);\n    });\n  }\n\n  public start(): void {\n    this.gameRunning = true;\n    this.gameLoop(0);\n  }\n\n  private gameLoop(currentTime: number): void {\n    if (!this.gameRunning) return;\n\n    const deltaTime = currentTime - this.lastTime;\n    this.lastTime = currentTime;\n\n    this.update(deltaTime);\n    this.render();\n\n    requestAnimationFrame((time) => this.gameLoop(time));\n  }\n\n  private update(deltaTime: number): void {\n    // Update player\n    this.player.update(deltaTime, this.inputManager);\n    \n    // Update level (including enemies)\n    this.level.update(deltaTime);\n    \n    // Check collisions\n    this.checkCollisions();\n    \n    // Update UI\n    this.updateUI();\n  }\n\n  private checkCollisions(): void {\n    // Check if player fell off the level\n    if (this.player.y > this.canvas.height) {\n      this.playerDie();\n    }\n\n    // Check collisions with platforms\n    this.level.checkCollisions(this.player);\n  }\n\n  private playerDie(): void {\n    this.lives--;\n    if (this.lives <= 0) {\n      this.gameOver();\n    } else {\n      this.player.reset(100, 400);\n    }\n  }\n\n  private gameOver(): void {\n    this.gameRunning = false;\n    alert('Game Over! Final Score: ' + this.score);\n    // Reset game\n    this.score = 0;\n    this.lives = 3;\n    this.player.reset(100, 400);\n    this.start();\n  }\n\n  private updateUI(): void {\n    const scoreElement = document.getElementById('score');\n    // Update lives display\n    const livesElement = document.getElementById('lives');\n    \n    if (scoreElement) scoreElement.textContent = this.score.toString();\n    if (livesElement) livesElement.textContent = this.lives.toString();\n  }\n\n  private render(): void {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Draw level\n    this.level.render(this.ctx);\n    \n    // Draw player\n    this.player.render(this.ctx);\n  }\n\n  public loadLevel2(): void {\n    this.level = new Level2();\n    this.start();\n  }\n}\n","import { Game } from './game/Game';\n\n// Initialize the game when the page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n  const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\n  const game = new Game(canvas);\n  game.start();\n});\n"],"names":["Player","x","y","__publicField","deltaTime","inputManager","dt","canvas","maxWidth","ctx","onGround","velocity","Turtle","BaseLevel","won","message","Level","width","height","groundHeight","turtle","platform","idx","player","playerBounds","turtleBounds","t","Game","FlyingEnemy","Level2","groundY","enemy","enemyBounds","playAgainBtn","InputManager","key","pressed","leftButton","rightButton","jumpButton","e","touch","rect","currentTime","time","scoreElement","livesElement"],"mappings":"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"}